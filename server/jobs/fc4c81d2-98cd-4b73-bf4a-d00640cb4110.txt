Alex and Aamir are applying for jobs. Alex is focusing on leetcode because that's what big tech companies ask. In the interviews, Aamir believes that leetcode is a waste of time. He believes that nobody uses these algorithms at the actual job. So he is focusing on building a very powerful chrome extension. Because building cool projects is what gets you jobs. Who do you think will succeed in getting good jobs? Today I will tell you the truth about leetcode and projects Based on my experience of interviewing more than 100 times. I will also share some job hunting strategies that have worked for me in the past. Let's do this. Before I got a job at Amazon, I spent months grinding leetcode. Day and night I would solve one problem after another. They say that if you can solve Medium problems consistently, you are ready for interviews. So I kept practicing until Medium started feeling like easy. At this point I was very confident about my preparation. I started applying for different companies including Amazon. But something strange happened. I never heard back from most of these companies. The companies that did reply rejected me without giving me an interview. This was very confusing because I knew that I could solve their interview problems. I had done almost 300 problems on Leetcode at this point. After a lot of rejections, I finally figured out what was going wrong. You see every company has a hiring funnel. At the top of this funnel is resume screening. This is where they look at your resume and decide if you are even worthy of an interview. At the bottom of the funnel are coding interviews where they check if you can actually solve the problems. My leetcode preparation would have definitely helped me crack coding interviews, but my resume had nothing to show for it. No good projects, no real world experience. As a result, I was getting rejected at the resume screening step. I never even got a chance to show my leetcode skills. After this realization, I spent next six months building projects. I but I did not do just any projects. I researched what kind of projects actually impress hiring managers and I built those specific projects that I'll talk about later in the video. The results were surprising. The same companies that had ghosted me a few months back were ready to give me a shot. That's when I realized something very important. Projects help you get past resume screening, but leetcode helps you crack interviews. You need them both to get that job. When it comes to projects, you can build a web scraper or a privacy based browser. For both these projects you are going to need proxies. A proxy reroutes your traffic through another IP so websites see a different location. It's super useful for accessing global data or avoiding blocks. I have been using DataImpulse for this. Their residential proxies are totally legit since they come from real devices. Websites almost never detect or block them. They are fast, reliable and you can choose IPs from 195 locations. Their support team is always online and your traffic never runs out. You can start testing with only $1 per GB. If you are doing anything with scraping ad research or just want more privacy, I highly recommend DataImpulse. I will leave a link in the description. Anyway, let's continue with the video. Here is a real example that can help you understand this better. Better put yourself in the shoes of a recruiter At Amazon. You get thousands of resumes every single day. You need to decide which ones to shortlist for interviews. Today you get two interesting resumes. Resume one has this very interesting project that uses machine learning to Detect skin cancer. Resume 2 has no real projects, but it shows that candidate has solved more than 500 leetcode problems. Which resume would you shortlist? Most people would pick Resume one and they would be right. That's because Resume one gives you confidence that this person can write production quality code. But here's where this gets interesting. When this candidate shows up for interviews, they might completely bomb it because they have not prepared leetcode style problems. That's because Amazon designs their interviews to test your problem solving and algorithmic thinking. They believe that if you can solve complex algorithmic problems in the interviews, you can learn anything else on the job. And that's exactly what leetcode helps you practice. But getting good at leetcode problems requires consistency. You need to show up week after week to practice popular interview problems. That's where Instabyte comes in. On instabyte, I send you a free weekly email with popular interview problems, their solutions, system design articles and much more. These emails are designed to be read in less than five minutes, so they save you a lot of time. If you are interested in signing up, you can go to Instabyte IO, enter your email and hit subscribe. Next 1000 subscribers will also get a free 5 day email crash course on how to crack big tech companies. Anyway, let's continue with the video. Not every company interviews like Amazon When I was interviewing for my first job, I applied to both big tech companies and startups. For big tech I would usually do 34 leetcode style interviews. These would focus heavily on data structures and algorithms, but for some startups the process was completely different. They would focus on my projects and my ability to build features fast. Eventually I realized why this happens. Big tech companies like Google or Amazon can afford to train you. They have dedicated training programs and mentors who can teach you their tech stack. What they care about is your ability to learn and solve problems and that's what they are trying to test in the coding interviews. Startups, on the other hand, need someone who can be productive from day one. Another thing that affects how you should prepare is the role you are targeting. For example, front end developers might need to do leet code, but the bar is usually lower than the backend engineers. Frontend interviews usually Focus more on JavaScript concepts and DOM manipulation. Algorithmic problems would usually be easier than the backend interviews, and in some cases there might not even be a leetcode style interview there. That's because frontend developers spend most of their time working with HTML, CSS and JavaScript frameworks. So the companies might focus more on the portfolio of websites that you've built. For the backend role, they want to make sure that you can write efficient code that can handle millions of requests. And that's what leetcode style problems might test you on. The mistake most people make is that they ignore one or the other. Some people are so obsessed with leetcode that they forget to build any sort of projects. Others build project after project, but never practice algorithmic problems. You want to become what I call a T shaped programmer. The horizontal bar of T represents your problem solving abilities that you get from doing leetcode and the vertical bar represents deep expertise in one area that comes from building projects. This T shape makes you very attractive to employers. With leetcode, you can crack algorithmic style interviews with projects. You can show that you already have experience solving the exact kind of problems they want you to solve. But how can you balance between leetcode and projects? First, look at what kind of companies you want to target. If you're targeting big tech companies like Google or Amazon and you have never done Leetcode before, you should spend 70% of your time on Leetcode and 30% of your time on projects. That's because these companies have a very standardized interview process that focuses heavily on algorithms. But if you're focusing on startups or smaller companies, flip those numbers. Spend 70% of your time building impressive projects and and 30% on Leetcode. These companies care more about your ability to ship features fast. Also note that like I said earlier, some companies might not even need leetcode at all. So if that's your case, completely Focus on Building projects so far we have seen that you need a combination of leetcode and projects for most roles. Is there a way to do them both together? The answer is yes. There are some projects that would need a good understanding of algorithms. For example, if you are building a rate limiter for a service, you might need to use a sliding window algorithm. Or if you are building a web crawler, you might use Breadth First Search or BFS to crawl new URLs. The project driven approach to algorithms can help you in two ways. One, you actually get to implement algorithms, which makes your understanding much better. Two, if the interviewer asks you a BFS or sliding window problem, you can tell them how you use this algorithm in one of your projects. This will help you impress the interviewer because most people just memorize the solution. Even if you are using algorithms in your projects, you would still need some dedicated time for leetcode. So create a study plan that combines both leetcode and projects. For example, you can do leetcode in the morning when your mind is fresh and work on the projects in the evening. Or you can alternate between leetcode and projects on different days. The key is to be consistent with both. If you Want to Know 6 Leetcode Mistakes that Most beginners make, watch this video. My name is Sahil and I'll see you in the next one.