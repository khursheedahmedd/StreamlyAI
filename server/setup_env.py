#!/usr/bin/env python3
"""
Environment Setup Script for StreamlyAI
This script helps you set up your environment variables for the StreamlyAI backend.
"""

import os
import sys

def create_env_file():
    """Create a .env file with user input"""
    
    print("🚀 StreamlyAI Environment Setup")
    print("=" * 40)
    print()
    
    # Check if .env already exists
    if os.path.exists('.env'):
        response = input("⚠️  .env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("Setup cancelled.")
            return
    
    print("Please provide your API keys. You can get them from:")
    print("- AssemblyAI: https://www.assemblyai.com/")
    print("- Groq: https://console.groq.com/")
    print("- Cohere: https://cohere.ai/ (optional)")
    print()
    
    # Get API keys from user
    assemblyai_key = input("Enter your AssemblyAI API key (required): ").strip()
    if not assemblyai_key:
        print("❌ AssemblyAI API key is required!")
        return
    
    groq_key = input("Enter your Groq API key (required): ").strip()
    if not groq_key:
        print("❌ Groq API key is required!")
        return
    
    cohere_key = input("Enter your Cohere API key (optional, press Enter to skip): ").strip()
    print("Note: Cohere API key is optional but recommended for better embeddings.")
    print("If provided, the system will use 'embed-english-v3.0' model for embeddings.")
    
    # Create .env content
    env_content = f"""# StreamlyAI Environment Variables
# Generated by setup_env.py

# Required API Keys
ASSEMBLYAI_API_KEY={assemblyai_key}
GROQ_API_KEY={groq_key}

# Optional API Keys
COHERE_API_KEY={cohere_key if cohere_key else ''}

# Flask Configuration
FLASK_ENV=development
FLASK_DEBUG=True
"""
    
    # Write to .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        print("✅ .env file created successfully!")
        print()
        print("Next steps:")
        print("1. Install dependencies: pip install -r requirements.txt")
        print("2. Run the server: python backend.py")
        print()
        print("Happy coding! 🎉")
        
    except Exception as e:
        print(f"❌ Error creating .env file: {e}")

def validate_env():
    """Validate that all required environment variables are set"""
    
    print("🔍 Validating environment variables...")
    
    required_vars = ['ASSEMBLYAI_API_KEY', 'GROQ_API_KEY']
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"❌ Missing required environment variables: {', '.join(missing_vars)}")
        print("Please run: python setup_env.py")
        return False
    else:
        print("✅ All required environment variables are set!")
        return True

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "validate":
        validate_env()
    else:
        create_env_file() 